#!/bin/bash
FILES_TO_LINK=(
  .tool-versions
  .default-python-packages
  .default-gems
  .scripts
  .ripgreprc
  .dracula
  .config/nixpkgs
  .config/git/.gitignore.global
)

DIR="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"

function Help {
  echo "Installs and configures the dotfiles, as seen in README.md"
  echo ""
  echo "Usage: $0"
  echo "options:"
  echo "  -h, --help    displays this message"
  echo "  --git-email   global git configuration email"
  echo "  --git-name    global git configuration name"
  exit $1
}

function MissingOptionError {
  echo "Option $1 must be present; aborting"
  exit -1
}

while getopts "h-:" optchar; do
  case $optchar in
  -)
    case $OPTARG in
    git-email)
      git_email="${!OPTIND}"
      ;;
    git-email=*)
      git_email=${OPTARG#*=}
      ;;
    git-name)
      git_name="${!OPTIND}"
      ;;
    git-name=*)
      git_name=${OPTARG#*=}
      ;;
    help)
      Help 0
      ;;
    esac
    ;;
  h)
    Help 0
    ;;
  esac
done

# Check mandatory values
if [[ -z $git_email ]]; then
  MissingOptionError git-email
fi
if [[ -z $git_name ]]; then
  MissingOptionError git-name
fi

# Global variables
unameOut="$(uname -s)"    # Used to differentiate Mac from other UNIX-like systems

[[ ! -d $HOME/.backups ]] && mkdir -p $HOME/.backups
for file in ${FILES_TO_LINK[@]}; do
  [[ -e "$HOME/$file" ]] && mv "$HOME/$file" "$HOME/.backups/"
  ln -s "$DIR/$file" "$HOME/$file"
done
unset file

# Installing nix
if ! command -v nix-env >/dev/null; then
  sh <(curl -L https://nixos.org/nix/install) --daemon
fi

# Creating local.zsh file
cp "$DIR/.scripts/zsh/local.template.zsh" "$HOME/.local.zsh"
[[ -e "$DIR/.scripts/zsh/local.zsh" ]] && rm "$DIR/.scripts/zsh/local.zsh"
ln -s "$HOME/.local.zsh" "$DIR/.scripts/zsh/local.zsh"

# Linking local.nix
cp $DIR/.config/nixpkgs/local.template.nix $HOME/.local.nix
sed -i "s/#EMAIL/$git_email/g" $HOME/.local.nix
sed -i "s/#NAME/$git_name/g" $HOME/.local.nix
[[ -e $DIR/.config/nixpkgs/local.nix ]] && rm $DIR/.config/nixpkgs/local.nix
ln -s $HOME/.local.nix $DIR/.config/nixpkgs/local.nix

# Installing Home Manager
if ! command -v home-manager >/dev/null; then
  nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager
  nix-channel --update
  nix-shell '<home-manager>' -A install
fi

if [[ ! "${SHELL##*/}" == "zsh" ]]; then
  SHELL=$HOME/.nix-profile/bin/zsh
  [[ ! $(grep $SHELL /etc/shells) ]] && echo $SHELL | sudo tee -a /etc/shells
  chsh $USER -s $SHELL
fi

# Installing asdf
if ! command -v asdf >/dev/null; then
  git clone https://github.com/asdf-vm/asdf.git $HOME/.asdf --branch v0.8.0
fi

# Installing asdf languages
asdf install

# Installing Brew and packages (Mac)
if [[ "${unameOut}" == "Darwin" && -z "$(command -v brew)" ]]; do
  if [[ -z "$(command -v xcode-select)" ]]; do
    echo "Brew could not be installed because Xcode is missing"
    echo "Check Brew homepage for more information:"
    echo "https://docs.brew.sh/Installation"
  else
    xcode-select --install
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
  fi
fi

# Installing extra tools
# if [[ -z "$(command -v cht.sh)"]]; do
  # curl https://cht.sh/:cht.sh > /usr/local/sbin/cht.sh
  # chmod +x /usr/local/sbin/cht.sh
  # curl cheat.sh/:bash_completion > /usr/local/share/zsh/site-functions/cht.sh
# fi

# Installing Dracula ZSH theme
[[ ! -d $DIR/.dracula ]] && mkdir -p $DIR/.dracula
if [[ -d $DIR/.dracula/zsh ]]; then
  git -C $DIR/.dracula/zsh pull
else
  git clone https://github.com/dracula/zsh.git $DIR/.dracula/zsh
fi
[[ -e $HOME/.oh-my-zsh/themes/dracula.zsh-theme ]] && rm $HOME/.oh-my-zsh/themes/dracula.zsh-theme
ln -s $DIR/.dracula/zsh/dracula.zsh-theme $HOME/.oh-my-zsh/themes/dracula.zsh-theme

# Installing Dracula Sublime theme (for bat)
if [[ -d $DIR/.dracula/sublime ]]; then
  git -C $DIR/.dracula/sublime pull
else
  git clone https://github.com/dracula/sublime.git $DIR/.dracula/sublime
fi
[[ ! -d $HOME/.bat-themes ]] && mkdir -p $HOME/.bat-themes
[[ -e $HOME/.bat-themes/Dracula.tmTheme ]] && rm $HOME/.bat-themes/Dracula.tmTheme
ln -s $DIR/.dracula/sublime/Dracula.tmTheme $HOME/.bat-themes/Dracula.tmTheme

# Cleanup
unset FILES_TO_LINK
unset DIR
unset git_email
unset git_name
unset unameOut

echo "Finished; you may have to reopen the shell, source .zshrc again, or run 'exec -l \$SHELL'"
echo "Running 'exec -l \$SHELL' now"

exec -l $SHELL
