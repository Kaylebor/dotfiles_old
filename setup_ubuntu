#!/bin/bash

# Determine OS platform
UNAME=$(uname | tr "[:upper:]" "[:lower:]")
# If Linux, try to determine specific distribution
if [ "$UNAME" == "linux" ]; then
    # If available, use LSB to identify distribution
    if [ -f /etc/lsb-release -o -d /etc/lsb-release.d ]; then
        DISTRO=$(lsb_release -i | cut -d: -f2 | sed s/'^\t'//)
    # Otherwise, use release info file
    else
        DISTRO=$(ls -d /etc/[A-Za-z]*[_-][rv]e[lr]* | grep -v "lsb" | cut -d'/' -f3 | cut -d'-' -f1 | cut -d'_' -f1)
    fi
else
  echo "Error: System is not Linux; aborting."
  exit 1
fi
# For everything else (or if above failed), just use generic identifier
[ "$DISTRO" == "" ] && DISTRO=$UNAME
unset UNAME

# This script as of right now only works with Ubuntu
if [[ $DISTRO != Ubuntu ]]; then
  echo "Error: System is not Ubuntu; aborting."
  exit 1
fi

FILES_TO_LINK=(
  .asdfrc
  .config/bat/config
  .config/git/.gitignore.global
  .config/git/config
  .config/nvim/init.vim
  .config/tg/conf.py
  .config/topgrade.toml
  .doom.d/config.el
  .doom.d/init.el
  .doom.d/packages.el
  .default-gems
  .default-golang-pkgs
  .default-npm-packages
  .default-python-packages
  .dracula
  .ripgreprc
  .scripts
  .tool-versions
  .zshrc
)

DIR="$( cd -- "$(dirname "$0")" || exit >/dev/null 2>&1 ; pwd -P )"

function Help {
  echo "Installs and configures the dotfiles, as seen in README.md"
  echo ""
  echo "Usage: $0"
  echo "options:"
  echo "  -h, --help      displays this message"
  echo "  --git-email     global git configuration email"
  echo "  --git-name      global git configuration name"
  echo "  --github-user   global git configuration github user"
  exit "$1"
}

function MissingOptionError {
  echo "Error: Option $1 must be present; aborting"
  exit 1
}

function LinkGeneralFiles {
  [[ ! -d $HOME/.backups ]] && mkdir -p $HOME/.backups
  for file in ${FILES_TO_LINK[@]}; do
    [[ -h $HOME/$file ]] && rm $HOME/$file
    [[ -a $HOME/$file ]] && mv $HOME/$file $HOME/.backups/
    parentdir=$HOME/$(dirname $file)
    [[ ! -d $parentdir ]] && mkdir -p $parentdir
    ln -s $DIR/$file $HOME/$file
  done
  unset parentdir
  unset file
}

function LinkLocalZSH {
  [[ ! -e $HOME/.local.zsh ]] && cp $DIR/.scripts/zsh/local.template.zsh $HOME/.local.zsh
  [[ -a $DIR/.scripts/zsh/local.zsh ]] && rm $DIR/.scripts/zsh/local.zsh
  ln -s $HOME/.local.zsh $DIR/.scripts/zsh/local.zsh
}

function LinkDraculaThemes {
  # Installing Dracula themes
  git submodule update --init --recursive --force

  # ZSH theme
  dracula_zsh_theme=${ZSH:-$HOME/.oh-my-zsh}/themes/dracula.zsh-theme
  [[ -e $dracula_zsh_theme || -h $dracula_zsh_theme ]] && rm $dracula_zsh_theme
  ln -s $DIR/.dracula/zsh/dracula.zsh-theme $dracula_zsh_theme
  unset dracula_zsh_theme

  # Sublime theme (for bat)
  bat_config_dir=$(bat --config-dir)
  mkdir -p $bat_config_dir/themes
  [[ ! -e $bat_config_dir/config ]] && bat --generate-config-file
  dracula_sublime_theme=$bat_config_dir/themes/Dracula.tmTheme
  [[ -e $dracula_sublime_theme || -h $dracula_sublime_theme ]] && rm $dracula_sublime_theme
  ln -s $DIR/.dracula/sublime/Dracula.tmTheme $dracula_sublime_theme
  unset bat_config_dir
  unset dracula_sublime_theme
}

function LinkGithubConfig {
  [[ ! -d $DIR/.config/git ]] && mkdir -p $DIR/.config/git
  if [[ ! -e $DIR/.config/git/.local.gitconfig ]]; then
    cp $DIR/.config/git/local.template.config $DIR/.config/git/.local.gitconfig
  fi
  [[ -h $HOME/.local.gitconfig ]] && rm $HOME/.local.gitconfig
  if [[ ! -e $HOME/.local.gitconfig ]]; then
    ln -s $DIR/.config/git/.local.gitconfig $HOME/.local.gitconfig
  fi
}

while getopts "h-:" optchar; do
  case $optchar in
  -)
    case $OPTARG in
    git-email)
      git_email="${!OPTIND}"
      ;;
    git-email=*)
      git_email=${OPTARG#*=}
      ;;
    git-name)
      git_name="${!OPTIND}"
      ;;
    git-name=*)
      git_name=${OPTARG#*=}
      ;;
    github-user=*)
      github_user=${OPTARG#*=}
      ;;
    link-only)
      LinkGeneralFiles
      LinkLocalZSH
      LinkDraculaThemes
      LinkGithubConfig
      exit 0
      ;;
    help)
      Help 0
      ;;
    esac
    ;;
  h|*)
    Help 0
    ;;
  esac
done

# Check mandatory values
if [[ -z $git_email ]]; then
  MissingOptionError git-email
fi
if [[ -z $git_name ]]; then
  MissingOptionError git-name
fi
if [[ -z $github_user ]]; then
  MissingOptionError github-user
fi

# Configuring local Git configuration
LinkGithubConfig
sed -i "s/#EMAIL/$git_email/g" $HOME/.local.gitconfig
sed -i "s/#NAME/$git_name/g" $HOME/.local.gitconfig
sed -i "s/#GITHUB_USER/$github_user/g" $HOME/.local.gitconfig

# Linking files
LinkGeneralFiles

# Installing packages
sudo apt-get update
sudo apt-get upgrade
xargs -a <(awk '! /^ *(#|$)/' "$DIR/apt-packages" | grep ppa) \
  -I{} -r -- sudo add-apt-repository -y {}
sudo apt-get install \
  $(awk '! /^ *(#|$)/' "$DIR/apt-packages" | grep install | \
    cut -d' ' -f2 | tr '\n' ' ')

# Creating local.zsh file
LinkLocalZSH

if [[ ${SHELL##*/} != zsh ]]; then
  SHELL=/bin/zsh
  [[ ! $(grep "$SHELL" /etc/shells) ]] && echo $SHELL | sudo tee -a /etc/shells
  chsh -s $SHELL $USER
fi

# Installing asdf
if [[ -z $(command -v asdf) ]]; then
  asdf_repo=$HOME/.asdf
  if [[ ! -d $asdf_repo ]]; then
    git clone https://github.com/asdf-vm/asdf.git $asdf_repo --branch v0.10.2
  fi
  source $asdf_repo/asdf.sh
  cat .tool-versions | cut -d' ' -f1 | xargs -I{} asdf plugin add {}
  unset asdf_repo
fi

# Installing asdf languages
asdf install

# Install Rust packages
if [[ -z $(command -v rg) ]]; then
  cargo install --features 'pcre2'
fi
cargo install exa
cargo install bat
cargo install git-delta

asdf reshim rust

# Install Doom Emacs
if [[ -z $(command -v doom) ]]; then
  git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.emacs.d
  ~/.emacs.d/bin/doom install
fi

# Install oh-my-zsh
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"

# oh-my-zsh plugins
if [[ ! -d ${ZSH_CUSTOM:=${ZSH:-$HOME/.oh-my-zsh}/custom}/plugins ]]; then
  mkdir -p $ZSH_CUSTOM/plugins
fi

if [[ ! -d $ZSH_CUSTOM/plugins/zsh-autosuggestions ]]; then
  git clone https://github.com/zsh-users/zsh-autosuggestions \
    $ZSH_CUSTOM/plugins/zsh-autosuggestions
fi

if [[ ! -d $ZSH_CUSTOM/plugins/F-Sy-H ]]; then
  git clone https://github.com/z-shell/F-Sy-H.git \
    $ZSH_CUSTOM/plugins/F-Sy-H
fi

if [[ ! -d $ZSH_CUSTOM/plugins/zsh-completions ]]; then
  git clone https://github.com/zsh-users/zsh-completions \
    $ZSH_CUSTOM/plugins/zsh-completions
fi

# Install forgit
if [[ ! -f $HOME/projects/github/forgit/forgit.plugin.zsh ]]; then
  git clone https://github.com/wfxr/forgit \
    $HOME/projects/github/forgit
fi

# fzf zsh integration
[[ -f /usr/local/opt/fzf/install && ! -f $HOME/.fzf.zsh ]] && . /usr/local/opt/fzf/install

# cht.sh
[[ ! -d $HOME/.bin ]] && mkdir $HOME/.bin
if [[ ! -f $HOME/.bin/cht.sh ]]; then
  curl https://cht.sh/:cht.sh > $HOME/.bin/cht.sh
  chmod +x $HOME/.bin/cht.sh
fi

LinkDraculaThemes

# Neovim configuration
sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
nvim -c ':PlugInstall' -c 'call input("Press any key to continue")' -c ':qa'

opam init

# Cleanup
unset DISTRO
unset FILES_TO_LINK
unset DIR
unset git_email
unset git_name

echo "Finished; you may have to reopen the shell, source .zshrc again, or run 'exec -l \$SHELL'"
echo "Running 'exec -l \$SHELL' now"

exec -l $SHELL
